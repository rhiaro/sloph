@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sioc: <http://rdfs.org/sioc/types#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .

<http://blog.rhiaro.co.uk/socialwg6-summary>
  dcterms:created "2016-06-25T17:39:36+01:00"^^xsd:dateTime ;
  sioc:content """# Social Web WG 6th face-to-face summary

*This post is my own opinion, and does not necessarily represent the opinion of the Social Web WG!*

See also [day 1 minutes](https://www.w3.org/wiki/Socialwg/2016-06-06-minutes) and [day 2 minutes](https://www.w3.org/wiki/Socialwg/2016-06-07-minutes).

We met in Portland on 6th and 7th June. What follows is more detail on my perspective of the main conversations we had over the two days. Clarifications and corrections welcome. This doesn't cover everything we talked about in detail; as well as the following, we resolved (or at least discussed) issues on *all* of the specs, and took a few to new Working Draft status.

## Demos

I demoed my ActivityPub implementations; clients [Burrow](https://apps.rhiaro.co.uk/burrow) for checkins, [Obtainium](https://apps.rhiaro.co.uk/obtainium) for consumption/purchase logging, [Replicator](https://apps.rhiaro.co.uk/replicator) for food logging and [Seeulator](https://apps.rhiaro.co.uk/seeulator) for journeys and events. These all do *create* only by sending either appropriate activities (including some extensions) to my activitypub endpoint (aka outbox, but not discoverable as such yet).

Seeulator creates the right kind of activity based on what attributes are filled in or left blank, essentially doing post-type discovery - albeit my own algorithm rather than [tantek's spec](https://tantek.github.io/post-type-discovery/) from the user input to generate the right `as:Activity`.

The newer thing I worked on was a client that only does *updates* of existing AS2 data. I wanted this so I could add captions to all my photos at img.amy.gy, so [Morph](https://apps.rhiaro.co.uk/morph) does just that. This also means it has to be able to *read/consume* the AS2 data published at img.amy.gy about `as:Collection`s of photos.

[Aaron](https://aaronpk.com) demoed the Webmention test suite at [webmention.rocks](https://webmention.rocks) and notes that there are Webmention Rocks stickers available for people [submitting implementation reports](https://github.com/aaronpk/webmention/tree/master/implementation-reports)..

Aaron also demoed a new feature in the [Micropub](http://www.w3.org/TR/micropub) spec which is the [media endpoint](http://micropub.net/draft/#media-endpoint). After some discussion recently it was established that all mainstream social APIs seem to post media (like images) that have been embedded in a post to a separate endpoint, then embed the returned URL in the post content, and MediaGoblin does this too. Aaron's implementation in [Quill](https://quill.p3k.org/editor) is really swish looking, uploading the file to the discovered media endpoint whilst you're typing the rest of the blog post, then embedding it back in the UI so you can see it straight away. I should probably implement something along these lines, and sync it up with what ActivityPub is doing (which is going to be basically the same); it's especially useful as I host my images on a completely different domain and stack from my blog posts and right now I have a by-hand process of uploading images to one server, then copying the URL into a blog post to embed.

[Evan](https://e14n.com/evan) showed the [Wordpress plugin implementation of AS2](https://github.com/pfefferle/wordpress-activitystream-extension) by [pfefferle](http://notizblog.org/), demonstrated on his [fuzzy.ai blog](http://blog.fuzzy.ai/). We all noticed a few bugs and AS1-isms in the implementation, but all correctable and all good flags for when we give advice for people switching existing implementations from AS1 to AS2.

## Modularising ActivityPub

For a while I've been pushing to break ActivityPub up into several separate specs for each part, modularised by functionality, reasoning that this will lower the barrier to both CR and conforming implementations. I feel strongly that distinct functionalities should not be dependent upon one another to conform to the spec; ie. if I only want to implement subscribing/reading in my application, I shouldn't be required to implement creating new content as well. I've been back and forth on this with [Chris](https://dustycloud.org) and [Jessica](https://theperplexingpariah.co.uk) for at least a year and we're all getting closer to understanding one another. The WG resolved at this meeting to split into ActivityPub (reading, creating, updating, deleting content) and ActivitySub (name pending; subscription and delivery of content). It took me a little longer than it should have to really grok how closely tied 'delivery' and 'notifications' are, but now I realise that regardless of what triggers 'delivery' of an activity, the process of 'delivery' to someone's inbox is the same. The triggering part can be a subscription (a special side effect of receiving a `Follow` activity) or a notification (an activity or object is created which is addressed to or links to a user or other activity/object). Thus I anticipate ActivitySub describing how the triggers work, then how delivery works upon a trigger. I'd still like to be able to conform to the 'delivery' part without worrying about the 'trigger' part (maybe I want to implement an entirely different subscription trigger mechanism) but this can be achieved with conformance classes if splitting the spec up further is too much.

## New work

The working group wraps up at the end of 2016. There's still time for us to work on new specs, but the ideal is that anything new being presented to the group will have been incubated (worked on, tested, implemented) outside of the group beforehand, either in a CG or other community or organisation. Coming soon to an editor's draft near you: PubSubHubbub!

## Next meeting

We confirmed we'll meet on Thursday and Friday at TPAC in Lisbon in September. We'll also run a social web breakout session on the plenary day (Wednesday) like we did last year.""" ;
  sioc:topic "activitypub", "activitystreams", "as2", "meeting", "micropub", "phd", "posttypediscovery", "protocols", "social", "socialwg", "standards", "w3c", "web", "webmention" ;
  foaf:isPrimaryTopicOf <http://rhiaro.co.uk/2016/06/socialwg6-summary> .

