@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix blog: <http://vocab.amy.so/blog#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix sioc: <http://rdfs.org/sioc/types#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .

<http://blog.rhiaro.co.uk/notes-sssw13-3>
  dcterms:title "[Notes] Manfred Hauswirth at #SSSW2013" ;
  dcterms:created "2013-07-08T14:23:00.000Z"^^xsd:datetime ;
  dcterms:modified "2013-07-17T14:25:01.453Z"^^xsd:datetime ;
  blog:bloggerid "tag:blogger.com,1999:blog-18505529.post-6724934902398748996" ;
  dc:creator <http://www.blogger.com/profile/12227954801080178130> ;
  sioc:content """  
  

** [It's a dynamic world! Ubiquitous streams and the Linked Data Web](http://www.slideshare.net/pooh42/eswc-2013keynoteslideshare) ** from Manfred Hauswirth (**[pooh42](http://www.slideshare.net/pooh42))**

  
Streams: Any time dependant data / changes over time.  
  
Has done a paper about P2P stuff.  
  
Data silo - "natural enemy of SW scientists"  
  
Massive exponential growth of global data.  
  
Still have to integrate dynamic data with static data.  
Multiway joins are domintion operator.  Need to be efficient.  
  
Everything/body is a _sensor_.  
  
Various research challenges:  
  

  * Query framework.
  * Efficient evaluation algorithm.
  * Optimise queries.
  * Organisation of data.
  
CoAP ~= http for sensors.  
  
Stuff about sensor networks and context - useful for Michael.  
  

  * Common abstraction levels for understanding.
  * SSN-XG ontology
    * Application: SPITFIRE
  * You can buy a sensor off the shelf that runs a binary RDF store and can be queried.  So possible to use SW tech with resource constrained devices.
  * RESTful sensor interfaces stuff being standardised - CoRE, CoAP.
  * Linked Stream Model
  * CQELS-QL (extension to SPARQL 1.1; already legacy)
  
Rewrite query to spit out static and dynamic - lots of overhead.  
But need to optimise _between_ these.  
Neither existing stream processing systems nor existing databases could be
efficient enough.  
So the built own LD stream processing system.  (Optimised and adopted existing
database stuff).  
  
HyperWave - didn't succeed.  Didn't listen to customers and wasn't open source
(license fees).  
But better than hypertext was back in the day.  
_Performance_ important for success/uptake.  
  
Just putting it on cloud infrastructure doesn't mean it scales.  
  

  * Need to parallelize algorithm.
  * Took it to a point where adding more hardware did help.
  * Problems!  Inconsistent results, engines don't support all query patterns.. very early, don't fully understand yet.
  * Long way to go.  How to prove what is a correct result?
  * Needs to be easy to use - dumb it down.
    * Linked Stream Middleware (available):
      * Flights, _live trains_ - SPARQL endpoint!, traffic cams.
      * SuperStreamCollider.org
      * Current Tomcat problem with twitter streams.
  
To do?  
  

  * Scaleability
  * Stream reasoning (only processing, pattern matching, so far.  Want to infer conclusions).
  
World is:  
... uncertain, fuzzy, contradictory.  
So combine statistics and logics.  
Hard to scale logical reasoning, so use statistics to shoot in the right
direction.  
  
Privacy?  
  

  * Build systems! Can't do thought experiments about the Web.
  
**Don't get hung up on approaches / labels.**

""" ;
  sioc:topic "sensors", "semantic web", "raw notes", "phd", "notes", "manfred hauswirth", "linked data stream", "events", "sssw13", "sssw2013", "stream", blog:Done ;
  foaf:isPrimaryTopicOf <http://rhiaro.co.uk/2013/07/notes-sssw13-3> .

